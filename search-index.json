[{"url":"\/concepts.html","title":"Concepts","content":"---------------------------------------------------------------\n\nid: concepts status: draft author: j.faassen@linkorb.com editor: masterbunny@gmail.com spellChecked:\n\nConcepts\n\nNetworQ uses a few concepts you need to understand in order to build your own graphs. An example organisation \"old-skool\", an imaginary School with students, teachers, suppliers, parents etc. serves as a model for this explanation.\n\nNaming convention\n\nNote the naming convention applied throughout NetworQ packages is [kebab-casing](http:\/\/wiki.c2.com\/?KebabCase).\n\nNode\n\nAll data in NetworQ is contained within a \"node\". A node has a name, for example our School has an IT supplier called soltech-it. Every node is part of a package, our School's package is old-skool:school.\n\n[Node Naming]\n\nThe node name and the package name combined give a Fully Qualified Node Name (FQNN), in this case old-skool:school:soltech-it. Thus, this supplier now exists as an entity. Other than the having its own unique identifier, its FQNN, a node doesn't have any other properties of it's own.\n\nBy tagging a node with one or more \"Types\", the node is given properties.\n\nTypes\n\nA \"Type\" defines what properties a node can have. For example, tagging the old-skool:school:soltech-it node with the supplier:management:contracts type allows you to specify the field contract-end-date for soltech-it, allowing the contract agreement end date to be linked to that supplier.\n\nNotice that our organisation OldSkool has reached out to use a type held within a different package (supplier:management). Now that the node SoltechIT is associated with this type all the architecture that comes with this type is now linked to the node. This means that every aspect of supplier management provided by this package, is now available to the School to use.\n\nType Names\n\nA type has a name (i.e. contracts) and is part of a package (i.e. supplier:managment). Combining the Type name and Package Name gives you a Fully Qualified Type Name (FQTN) (i.e. supplier:management:contracts).\n\n[Type Naming]\n\nManaging Types\n\nTypes are defined by creating .yaml files in the types\/ directory of a package. These are loaded with the package.\n\nTypes optionally define a list of Fields for the type.\n\nNodes tagged with this type will then adopt the listed fields.\n\n[Graphs link Packages]\n\nA Field can be either a string (simple text), or a FQTN. When you specify a FQTN for a Field, you can only assign nodes that are tagged with this type.\n\nA Field can be a single value (default), or a list of values (by appending [] to the end of the Field type definition).\n\n[Fields with single and multiple values]\n\nTags\n\nA \"Tag\" is simply the link between a Node and a Type. One Node can contain multiple Tags.\n\nPackage\n\nA \"Package\" is a reusable set of Types and Nodes. Packages can be shared and live in their own Git Repository.\n\nA Package defines Types (in the package's types\/ directory) using YAML files.\n\nA Package can optionally define a set of Nodes. Nodes in packages are therefore, are also reusable allowing you to share reference data or standardized lists (like countries, operating systems, etc.).\n\nA Package can optionally define Widgets, which are simple HTML templates (in the templates\/ directory) which get injected into the User Interface when a user is viewing a Node of a given Type.\n\nA Package always has a package.yaml file in the root of it's repository. The package.yaml file defines the Package's name, description, license etc. And lists an optional set of dependencies: other packages that this package depends on.\n\nGraph\n\nWhen using Networq, you'll almost always interact with a \"Graph\". A Graph is a container for one or more Packages and their contents (Nodes, Types, Widgets).\n\nA Graph always has exactly 1 \"Root Package\" which is the main package of your project. For our example this is School:OldSkool. Additionally the graph recursively loads and holds all packages that a parent package has a dependency on.\n\n[Graphs link Packages]\n\nDependencies\n\nFor our example we added the Supplier Contract Types that comes as part of the Supplier:Management package, however an institution as complicated as a school will pull in many packages and their dependents.\n\nWhen one package requires\/builds on another, it is called a \u201cDependency\u201d. Package A depends on Package B. Each package defines it\u2019s own dependencies so that when the package is installed, it\u2019s required dependencies are also automatically installed.\n\n[Packages may depend upon other Packages]\n\nFor example, the \"StudentBody\" package would need to hold fields within the type such as student home address. By making use of an existing postal system address package for the country the School is based in, school adminstrators can find each student's full address including post code (zip code), in the address package.\n\nSimilarly the GDPR package may be applied to the parent body, student body, staff and suppliers.","description":""},{"url":"\/demo.html","title":"Demo","content":"Demo\n\nThere is a demo-installation Networq available at demo.networq.io\n\nThis demo has the github.com\/networq\/acme graph loaded.\n\nThis graph represents the fictional company [\"Acme Corporation\"](https:\/\/en.wikipedia.org\/wiki\/Acme_Corporation).","description":""},{"url":"\/example-holacracy.html","title":"NetworQ Data Structure","content":"---------------------------------------------------------------\n\nstatus: draft spellChecked: author: masterbunny@gmail.com editor: j.faassen@linkorb.com\n\nNetworQ Data Structure\n\nThe structure of the data managed by NetworQ falls within 3 categories:\n\n- Graph\n- Node\n- Type\n\n[data model version H]\n\nBy adding and removing types you reset the properties of the node. This means the system is responsive from the bottom up.\n\nHolacracy and NetworQ\n\n[Holocracy](https:\/\/www.holacracy.org\/) is a institution organisation architecture. The process and philosophy of Hoacracy is one of flat management, providing teams with more autonomy. When an individual within an organisation is empowered to implement their own ideas, that organisation can flourish.\n\nThe creators of NetworQ apply this agile structure within their own business. Which is why one of the first packages implemented was the Holacracy package. By installing and applying this you create a simple, dynamic system to self-manage the Holacracy framework.\n\nHolacracy Terminology\n\nTo be able to apply the principles of Holacracy, you must become familiar with some basic concepts integral to the philosophical framework.\n\nRunning Examples\n\nRemember you may configure the NETWORQ_GRAPH variable in the .envfile to use any valid NetworQ package. Setting NETWORQ_EXAMPLES=true loads any example nodes found in the examples\/ directory of the root package.\n\nRefer to the [Getting Started Guide](getting-started.html) before progressing through this example.\n\nFor this guide we are examining and editing the [Holacracy package](https:\/\/github.com\/networq\/holacracy-package).\n\nHolacracy\n\nHolacracy is a bare bones example of a NetworQ Package. It contains domain specific Types (Circle, Partner, Role).\n\nGraph- Circle Node- Partner Type- Role\n\nFound a typo or error? [Create a PR](https:\/\/github.com\/networq\/www.networq.io).","description":""},{"url":"\/first-graph.html","title":"Create your first Graph","content":"Create your first Graph\n\n[Getting Started](getting-started.html) guides you through the installation of NetworQ. The terms used are covered in [concepts](concepts.html). Assuming that you are familiar with the terms, and have the setup completed, you are ready to create a Graph. A Graph is a container for one or more Packages and their contents, creating the functioning interface for your data.\n\nWorked example\n\nThis work-through will create an imaginary school headed by Barack Obama.\n\n1. Create a directory\n\nThe school name provides our package name; old-skool-nqp (following the convention to name a package with the tail \"NetworQ package\": nqp).\n\n2. Create the YAML package file\n\nThe [YAML](https:\/\/en.wikipedia.org\/wiki\/YAML) files in NetworQ are used as your data store, and for configuration. Create a YAML in your directory called package.yaml.\n\n[Create YAML]\n\n3. Populate the YAML relevant details\n\nFor example:\n\n- name\n- description\n- license\n\n4. Set up dependencies\n\nThe ability to use existing packages is a key functionality of NetworQ. For the sake of brevity, this example will use a minimal dependency list. A real Graph may adopt many packages.\n\n- Complete as shown:\n\nname: old-skool:organization\ndescription: Old Skool Organization Graph\nlicense: MIT\ndependencies:\nnetworq:core: latest # essential\nnetworq:resource: latest\nnetworq:organization: latest\nnetworq:linkedin: latest\nnetworq:skype: latest\nnetworq:contract: latest\n\n- Set directory to old-skool-nqp and run the command networq install.\n\n5. Configure NetworQ to run your package\n\nUsing the directory containing your old skool package, following [2-4](getting-started.html#apply-a-package) of Applying a Package in Getting Started. 5.1) [set up the dependencies](getting-started.html#2-install-networq). 5.2) [configure NetworQ](getting-started.html#3-configure-networq) to use this old-skool-nqp as the local package. 5.3) [start the server](getting-started.html#4-start-the-server).\n\nSuccess will look something like this: [My First Graph Example Skool]\n\n6. Git Ignore\n\nNetworQ installed dependent packages into a package directory. Rather than push these back to git hub it is best to set up a git ignore. In the old-skool-nqp directory, set up a git ignore file for the packages directory: packages\/.\n\n7. Create your first entity\n\n7.1 Create a directory called nodes.\n\n7.2 Create nodes to describe our first entity: Barack Obama.\n\nBarack Obama will be the head teacher for our imaginary school. That concept requires 3 nodes within our package.\n\nBarack is an individual. Management is a group and School is an organization. The management and organisation nodes are inherited from existing packages and so provide various types.\n\nCreating these nodes may be achieved by applying the following techniques:\n\n- Creating 3 YAML files in the nodes directory.\n\n[3 nodes, 3 YAML files].\n\n- Or by running a local instance of networq-web and browsing via localhost. The New Node button provides this functionality:\n\n[Create a new node]\n\n7.3 Populate the YAML Node files\n\n-\n\nold-skool.yaml\n\n- This YAML must describe the organization\n- Complete as shown:\n\nnetworq:core:node:\nname: Old Skool\n  description: This is the Old Skool organization\nnetworq:organization:organization: ~\nnetworq:organization:group: ~\n\n-\n\nmanagement.yaml\n\n- This YAML must describe the management group\n- Complete as shown:\n\nnetworq:core:node:\nname: Management group\nnetworq:organization:group:\n  parentGroup: old-skool:organization:old-skool\n\n-\n\nbarack-obama.yaml\n\n- This YAML must describe Barack Obama and his position in the school\n- Complete as shown:\n\nnetworq:core:node:\n  name: Barack Obama\n  image: (enter URL)\nnetworq:organization:member:\n  memberships:\n    barack-obama-management:\n      networq:organization:membership:\n        group: old-skool:organization:management\n        member: old-skool:organization:barack-obama\n        focus: Head teacher\n\n8. Create your second entity\n\nTo reinforce the concept, and introduce some shortcodes, let's give the school a teacher. Sarah Palin will be our Head of Mathematics and Barack Obama's assistant head. Sarah will, therefore, belong to more than one group, the management group, and the teaching group.\n\n8.1 Create the nodes for your entity\n\nThe management group already exists for Sarah to join however, we need to create a teaching group. The teaching group, as per a traditional school hierachy, sits under the management group.\n\n-\n\nteaching.yaml\n\n- This YAML must describe the teaching group\n- Complete as shown:\n\nnetworq:core:node:\nname: Teaching group\nnetworq:organization:group:\n  parentGroup: old-skool:organization:management\n\n-\n\nsarah-palin.yaml\n\n- This YAML must describe Sarah Palin and her position within the school\n- Complete as shown:\n\nnetworq:core:node:\n  name: Sarah Palin\n  image: (enter URL)\nnetworq:organization:member:\n  memberships:\n    ~teaching:\n      networq:organization:membership:\n        group: old-skool:organization:teaching\n        member: $\n        focus: Math\n    ~management:\n      networq:organization:membership:\n        group: old-skool:organization:management\n        member: $\n        focus: Head of Math\n\nNotice the use of $ here as shortcode to apply the document name. Similarly [] signifies many. networq:organization:membership[], for example, denotes multiple memberships.\n\nCongratulations\n\nYou have created your first graph and applied some of the basic concepts involved in making use of existing packages. This system may be used for myriad purposes. One of the early applications developed is for institutional management applying the [Holacracy](https:\/\/github.com\/networq\/holacracy-nqp) architecture.\n\nFound a typo or error? [Create a PR](https:\/\/github.com\/networq\/www.networq.io).","description":""},{"url":"\/getting-started.html","title":"Getting started","content":"Getting started\n\nPrerequisites for Installing NetworQ\n\nThe following prerequisites must be met before undertaking the installation:\n\n1) You are familiar with using [Git](https:\/\/git-scm.com\/)\n\n2) You are familiar with editing [YAML](https:\/\/wikipedia.org\/wiki\/YAML)\n\n3) You are able to run ([minimum version 7](http:\/\/php.net\/downloads.php)) [PHP](https:\/\/php.net) applications on your machine\n\n4) You are able to run [Composer](https:\/\/getcomposer.org\/) NB further system-dependent instructions for installing composer are available [here](https:\/\/getcomposer.org\/doc\/00-intro.html)\n\nIf one or more of these conditions are not met, don't worry. Rather, check out the [demo](demo.html) installation instead!\n\nInstall\n\nTwo items are required:\n\n-\n\n\"NetworQ Web\" is our web-based viewer application. You can configure it to load a Graph of your choice and browse it.\n\n- \"NetworQ Cli\" is a command-line utility used to:\n\n- inspect graphs (list packages, types, nodes)\n- install package dependencies\n\n1. Install NetworQ Web\n\nTo install, use a command prompt to run:\n\n$ git clone https:\/\/github.com\/networq\/networq-web\n$ cd networq-web # move to the directory\n$ composer install # Install this project's dependencies\n$ cp .env.dist .env # Copy the included `.env.dist` file to `.env`\n\n2. Install NetworQ Cli\n\nNext, install the command-line utilities + package manager. Choose a suitable directory location and use a command prompt to run:\n\n$ git clone https:\/\/github.com\/networq\/networq-cli\n$ cd networq-cli\n$ composer install\n\nApply a Package\n\nA NetworQ package must exist. For this example, we will use the [Holacracy Package](https:\/\/github.com\/networq\/holacracy-nqp).\n\n1. Clone the package\n\nClone the package from Git using a command window directed at the folder location you want to store the clone in:\n\n$ git clone https:\/\/github.com\/networq\/holacracy-nqp\n\n2. Install NetworQ\n\nInstall NetworQ to run this package.\n\nChange directory of the command window, to the folder containing your package, in this example the holacracy-nqp and run networq install.\n\nThe installation will create a directory \"packages\" and import all the dependency packages for your Graph.\n\n3. Configure NetworQ\n\nThe directory networq-web contains an environment file. Configure the NETWORQ_GRAPH variable in the .env file to apply any valid NetworQ package.\n\nThe environmental settings may be adjusted using the command prompt:\n\n$ edit .env # Adjust for your setup\n\n- Define the settings via the command prompt:\n\nNETWORQ_GRAPH=\/path\/to\/holacracy-nqp\nNETWORQ_EXAMPLES=true\n\n- Or edit the file directly. Browse to the file:\n\n[edit .env]\n\n- Set the value of NETWORQ_GRAPH to the folder containing the package.\n- Set the NETWORQ_EXAMPLES to true.\n- Save and close the file.\n\n[edit .env]\n\nSetting NETWORQ_EXAMPLES=true loads any example nodes found in the examples\/ directory of the root package.\n\n4. Start the server\n\n- Using a command prompt pointed at the directory networq-web run the server using:\n\n$ php -S 0.0.0.0:8080 -t public\/\n\n- Open http:\/\/localhost:8080\/ in a browser to start browsing the graph.\n\nQuick start with example data\n\nCongratulations! You should now be able to browse the example nodes in the holacracy package.\n\n[example nodes]\n\nNext Steps\n\nA good next step is to take an [abstract overview](concepts.html) of the components involved.\n\nTo work with the data structure and learn more about the different components continue with this [Holacracy](exampleholacracy.html) example.\n\nOr, create your [own graph](first-graph.html) using existing packages.","description":""},{"url":"\/","title":"NetworQ","content":"NetworQ\n\nWhat is \"NetworQ\"?\n\nIn technical terms: NetworQ is a multi-dimensional graph building platform.\n\nIt is a cocktail of: Mindmaps, Business Methodologies, ERP, all wrapped up in a data-management tool.\n\nUse it to organize your business, team, project, assests, infrastructure, life and much more...\n\nWhat can I use NetworQ for?\n\nWe've collected a set of use-cases to inspire you [here](use-cases\/). Your ingenuity and imagination is all that restricts further application.\n\nA 3 layer model\n\nThere are 3 layers to the data model of Networq.\n\n[data model]\n\nGraphs contain Nodes. Nodes get tagged with one or more Types.\n\nTypes give Nodes their Properties.\n\nTypes and Nodes can be bundled up into a Package to share it with others.\n\nYou can import Packages from others to re-use their work in your own Graphs.\n\nFor a more thorough explanation of these concepts, click [here](concepts.html)\n\nWhat packages are available?\n\nAnybody can publish packages for Networq that you can import and re-use.\n\nThe Networq project has published a range of packages you can use on github.com\/networq.\n\nSome examples:\n\n- [Organization package](https:\/\/github.com\/networq\/organization-package)\n- [Requirement package](https:\/\/github.com\/networq\/requirement-package)\n- [Holacracy package](https:\/\/github.com\/networq\/holacracy-package)\n- ...etc\n\nCan I see an online demo?\n\nYes, check out our [demo page](demo.html).\n\nCan I run Networq myself and start using it?\n\nYes, just follow our [getting started guide](getting-started.html).","description":""},{"url":"\/prerequisites\/windows\/windows10.html","title":"\/prerequisites\/windows\/windows10.html","content":"Windows 10 prerequisites run through\n\nTo set up a Windows 10 machine to run NetworQ, use the following guide.\n\n1. Install Git\n\n[Git Installer for Windows](https:\/\/git-scm.com\/download\/win) Download and run the executable. This provides you with Git bash to use as a command line.\n\n2. Install the PHP Runtime\n\nUse the [latest version](http:\/\/php.net\/downloads.php) Select the \"Windows downloads\". This will download a zip file which should be extracted to a folder such as C:\\PHP7.\n\n2a) The PHP.ini file does not come ready to use, out of the box.\n\nSelect either one of these files:\n\n[PHP.ini rename for Windows]\n\nand rename your choice to PHP.ini\n\n2b) Removing the semicolon uncomments the code in the PHP.ini files.\n\nIdentify and turn on the switch:\n\nextention_dir = \"ext\"\n\nby deleting the semicolon and saving the file.\n\n[PHP.ini edit for Windows]\n\nRemoving the \";\" uncomments the setting.\n\n2c) In the same way switch:\n\nextension=openssl\n\nto active, by deleting the semicolon and saving your change.\n\n2d) In the same way switch:\n\nextension=mbstring\n\nto active, by deleting the semicolon and saving your change.\n\n2e) Now add the PHP runtime to the Windows Path.\n\nIn the Windows control panel navigate to or search for \"advanced system settings\"\n\n[PHP Path settings for Windows]\n\nSelect \"Environment Variables\" Navigate to the path settings for Windows and select \"Edit\" if there is an existing PHP path, otherwise, \"New\".\n\nBrowse to your PHP runtime location (the folder where you unzipped to), and add that to the environment variable path. If you have older PHP version \"Edit\" will replace the outdated path.\n\n[Browse your PHP Path]\n\nAdd the path settings to the Windows environment.\n\n3) Install composer\n\nDownload Composer as an [executable](https:\/\/getcomposer.org\/doc\/00-intro.html). Run the .exe to install.\n\nRun some checks\n\nIt is a good idea to check that your setup attempts are working.\n\nPHP check\n\nIn a command window run:\n\n$ php --ini\n\nTo see the path for the php.ini file that the system is using.\n\nComposer check\n\nIn a command window run:\n\n$ composer -v\n\nThe response should look something like this:\n\n[Verify Composer Install]\n\nCongratulations, you are ready to run NetworQ on your windows machine\n\nReturn to the main [Set Up](\/getting-started.md) flow.","description":""},{"url":"\/readme.html","title":"NetworQ website","content":"NetworQ website\n\nThis repository contains the content for www.networq.io\n\nCouscous\n\nCouscous renders the site. Check couscous.io for further information.\n\nProxy\n\nIn order to use a custom domain-name with SSL, a proxy forwards requests from https:\/\/www.networq.io to https:\/\/networq.github.io\/website\/\n\nAbout NetworQ\n\nNetworQ provides both the back end and a graphical user interface (GUI) allowing the user to store, manipulate and manage data much as one would if the data was held in a relational database. However, by building the relationships during the data entry stage, there is no need for complex queries to extract the information.\n\nIn concert with this flexible data-storage and retrieval is the ability to use existing packages; including the architecture and functionality they provide.\n\nGet Started\n\nThere are a number of options available for those interested:\n\n- [Getting Started Guide](getting-started.html)\n- Check out the [demo](demo.html)\n- Read more about the [concepts](concepts.html)\n\nGreat Packages\n\nAs NetworQ develops and grows there will be many useful packages available. For now, here are some of the highlights:\n\n[Holocracy](\/\/github.com\/networq\/holacracy-nqp) [GDPR](https:\/\/github.com\/networq\/gdpr-nqp) [LinkedIn](https:\/\/github.com\/networq\/linkedin-nqp)","description":""},{"url":"\/trouble-shooting.html","title":"Trouble Shooting","content":"Trouble Shooting\n\nIf a graph or package was working, but now is not then [update](updatingnq.html).\n\nAlternatively, run through this check list:\n\nStep 1\n\nVerify that all [prerequisite](getting-started.html#Prerequisites-for-Installing-NetworQ) components are installed as per the [getting started guide](getting-started.html).\n\nStep 2\n\nIdentify the component that is failing. The PHP runtime environment must work with Composer. The two components NetworQ Web and NetworQ Cli must both be present.\n\nNeed to know\n\nTo use NetworQ web locally, your machine must have firewall settings to allow ports to be accessed.\n\n- In windows directory slashes are \\ while on Linux and Mac they are \/. If something doesn't work, try using the \"other\" option.\n- Editing a PATH variable only takes effect the next time bash starts. It is possible that the command line needs restarting or if all else fails, try restarting the whole machine.\n\nBrowse the list below for some common issues.\n\nNo Local NetowrQ Package\n\nA screen such as this is expected when there are no Graphs available to display in the current directory.\n\n[No local package available]\n\nIssues Starting the Server\n\nOn the directory networq-web you may run the server using:\n\n$ php -S 0.0.0.0:8080 -t public\/\n\nOpen http:\/\/localhost:8181\/ in a browser to start browsing the graph.\n\nIf this does not work try:\n\n$ php -S localhost:54321 -t public\/\n\nOpen http:\/\/localhost:54321 in a browser to start browsing the graph.\n\nOther issues\n\n[Needs write up] [Needs write up] [Needs write up]\n\nOr this one:\n\n$ rm symfony.lock\n$ git checkout symfony.lock\n\n[Needs write up]\n\nFound a typo or error? [Create a PR](https:\/\/github.com\/networq\/www.networq.io).","description":""},{"url":"\/types.html","title":"\/types.html","content":"Types\n\n\/\/TODO","description":""},{"url":"\/updating-networq.html","title":"\/updating-networq.html","content":"Updating NetworQ-web\n\n1. Update networkq-web\n\nSet directory to networq-web and run command:\n\n$ git pull\n\n2. Update the dependencies using Composer\n\nWithin the same networq-web directory run this command:\n\n$ composer install # install \/ update latest dependencies\n\nUpdating NetworQ-cli\n\n1. Updating networq-cli\n\nSet directory to networq-cli:\n\n$ git pull\n\n2. Update the dependencies using Composer\n\nWithin the same networq-cli directory run this command:\n\n$ composer install # install \/ update latest dependencies\n\nNext Steps\n\n- Follow [2-4](getting-started.html#2-install-networq) of installing networq in getting started.\n\nTest your success\n\nThe end-goal is that you can type networq + enter and be presented with something like this:\n\n[cli\/Bin Path settings for Windows]\n\n\"Command not found\" suggests that there's still something that needs fixing on the PATH variable, or resetting\/reloading the bash session.\n\nIf you relocate networq-cli then update the PATH Environment\n\nWindows\n\nIn the Windows control panel navigate to or search for \"advanced system settings\"\n\n[PHP Path settings for Windows]\n\nSelect \"Environment Variables\" Navigate to the path settings for Windows and select \"Edit\" If there is an existing PATH for the cli\\bin then verify it is correct. If not select Edit and browse to the correct location. If there is no current path select \"New\" and add the path, giving it an appropriate name.\n\n[cli\/Bin Path settings for Windows]\n\nAfter updating your PATH variable, you'll usually need to restart your bash terminal application for the changes to take effect.\n\nLinux\/Mac","description":""},{"url":"\/use-cases\/business-architecture.html","title":"Use-case: Enterprise \/ Business Architecture","content":"Use-case: Enterprise \/ Business Architecture\n\nUse Networq to define a Graph of your business containing all your team-members, suppliers, projects, products, processes.\n\nOnce you've defined your entire business as a Networq Graph, you'll have a single \"Source of Truth\" that serves as input for many different business scenarios:\n\n- Automatically generated Employee Manuals guaranteed to be current\n- Generated organizational charts\n- Compliancy control and auditing reports\n- Permission rules (authorization matrixes) for external services\n- HR applicant tracking\n- Performance evaluations\n- Business Process definitions with generated documentation","description":""},{"url":"\/use-cases\/competency-dictionaries.html","title":"Use-case: Competency dictionaries","content":"Use-case: Competency dictionaries\n\nDefine your own dictionaries listing competencies and their associated levels. Package them up in reusable lists and easily attach them to job postings, projects or even individual actions.\n\nTag your team members with a competency profile to keep track of their current levels, target levels and notes of their evaluations.\n\nCompetency dictionaries can be packaged up for re-use between companies. Company A can publish a beautiful \"Communication specialist\" competency dictionary, while Company B publishes a \"Customer service\" competency dictionary. Any company can now import (define a dependency on) these competency dictionary packages and start using them in their business.\n\nShareable competency dictionaries have a number of benefits:\n\n- No need to re-invent the wheel. Just use existing dictionaries where available, and only define your organization-specific competencies yourself.\n- Use the best dictionaries designed by domain expers from other organizations.\n- Mix and match to cherry pick specific competency definitions.\n- Dictionaries can be automatically updated so you'll get maintenance updates and enhancements for free.\n- Collaborate with other domain experts on competency dictionaries on GitHub\/GitLab\/etc.\n\nBuild supportive dictionaries by attaching learning resources for each competency level to support team-members in leveling up.","description":""},{"url":"\/use-cases\/holacracy.html","title":"Use-case: Holacracy","content":"Use-case: Holacracy\n\nTag your organizations and organizational units as Holacracy Circles and tag your team members as Holacracy Partners and start governing your business with Roles, Governance Meetings, Tactical meetings, Strategies, Domains and more.\n\nAs you'll be able to re-use your existing employee\/freelancer\/supplier data you'll be working from a single source and don't need to add them to Holacracy specific environments and tools.\n\nViewing a partner page will list all of his\/her holacracy details (circles, roles, etc) right next to other relevant types like HR information, Competencies, payment details, contact details and everything else related to this one person.","description":""},{"url":"\/use-cases\/","title":"Use-cases:","content":"Use-cases:\n\nNetworq can be used for a wide range of use-cases. By creating new types you can unlock even more use-cases.\n\nBelow you'll find a list of ideas to inspire you to think in Networqs:\n\n- [Business \/ Enterprise Architecture](business-architecture.html)\n- [Project planning](project-planning.html)\n- [Holacracy](holacracy.html)\n- [Infrastructure inventory](infrastructure-inventory.html)\n- [Competency dictionaries](competency-dictionaries.html)\n- Requirement engineering\n- Devops\n- Release engineering, Deployments, Repositories\n- GTD: Getting Things Done (inbox, lists, assignees, calendar)\n- Topic-based writing \/ wiki \/ knowledge base\n- Event organization\n- Track and share your personal memories\n- Monitoring, Backups, Firewalling\n- Business Processes\n- Runbooks\n- Docker: Registries, Compose files, \"Apps\"\n- GitHub\n- DNS\n- Business Model Canvas\n- Content Management System (CMS)\n- Personal Development\n- Followup \/ Watchlist\n- Databases, clusters\n- SWOT\n- Mission\/Vision\n- Contract management\n\nBest of all: blend these use-cases for maximum impact\n\nThe real power of Networq stats showing once you blend multiple use-cases into one massive graph.","description":""},{"url":"\/use-cases\/infrastructure-inventory.html","title":"Use-case: Infrastructure inventory","content":"Use-case: Infrastructure inventory\n\nUsing Networq you can create a Graph that contains every detail about your infrastructure. You can define Hosts (with their ip-adresses, operating system details, tags) and HostGroups which can serve as Inventory input to common configuratino management tools like Ansible, Puppet, Chef, etc.\n\nHolding the inventory in Networq instead of tool-specific formats allow you to re-use and single-source your infrastructure data for many other use-cases. You could attach VPS pricing information for budgeting, tags for compliance, monitoring rules as input for sensu\/nagios\/etc, etc etc.\n\nCombining these configurations into one makes sure that all your tools and services are guaranteed to be in sync.","description":""},{"url":"\/use-cases\/project-planning.html","title":"Use-case: Project planning","content":"Use-case: Project planning\n\nDefine your projects with it's actions and generate accurate status reports, worklists etc.\n\nStart attaching reusable requirements at either project or action level for detailed requirement documentation generation\n\nTag your projects with methodology specific types to enable Kanban, Scrum, Waterfall, etc.\n\nTag outsourced actions with budget types to keep track of your expenses.\n\nTag your projects with Wikis, Resource lists, Contacts and other types to truly work from a single source from different perspectives (planning, financial, hr, technical, etc).","description":""}]